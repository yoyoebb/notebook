和Github共享公钥
	1. 创建SSH公钥、私钥ssh-keygen -t rsa -C "ebb_1028@163.com"为密钥指定密码(common_style_1)
	2. 将公钥保存到GitHub
	3. 测试连接ssh -T git@github.com    选择yes，再次执行上面命令
从Github同步仓库
	1. Clone仓库(先在GitHub上建好Repository)
	git clone git@github.com:用户名/仓库名.git


集中式的版本控制：CVS、SVN、有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。每个版本记录的是修改文件的增量部分。
坏处：中央服务器单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要 是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就还是会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，而被客户端 提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人事先完整提取出来过。

分布式的版本控制：Git。客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜 像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份

* Git
** Git起源和特性
*** 起源
Linux内核开源项目有着众多全球各地的参与者，在1991-2002年间，绝大多数的工作都花在了提交和保存归档等繁琐事务上。从2002年开始，项目组开始使用一个专有的分布式版本控制系统BitKeeper来管理和维护代码。

到了2005年，开发BitKeeper的公司结束了与Linux项目组的合作关系，不再免费供其使用，这就迫使Linux社区(特别是Linus Torvalds)基于使用BitKeeper过程中的经验与教训，开发自己的版本控制系统，并提出了以下目标：
+ 速度
+ 简单的设计
+ 对非线性开发模式的强力支持(允许成千上万个并行开发的分支)
+ 完全分布式
+ 有能力高效管理超大规模的项目

git由此而生，它诞生于2005年，并日臻完善。

*** git的特性
Git相比较传统的VCS（CVS、SVN），以以下特性：
+ Git是分布式版本控制系统。SVN是集中式版本控制系统。
  分布式的好处就是仓库就在本地，你随时都可以工作，提交代码而不用依赖网络
+ Git提交时是直接记录文件快照，而非记录版本差异。
+ Git保证完整性
+ Git中文件存在三种状态：modified(已修改)、staged(已暂存)、committed(已提交)
** 本地操作命令
*** install
*** init git
安装好Git后，我们需要定制本机的Git环境。Git自带了一个git config工具来帮助我们设置变量(用于控制Git的外观和行为)。这些变量存储在三个不同的位置：
 - /etc/gitconfig文件 :: 包含系统上每一个用户及他们仓库的通用配置。对应 ~git config --system~
 - '~/.gitconfig' 或 '~/.config/git/config'文件 :: 只针对当前用户。对应 ~git config --global~
 - <working-dir>/.git/config文件 :: 针对当前仓库。

每一级别都会覆盖上一级别的配置。

安装完Git后马上应该做的就是配置你的用户名和邮件地址，这很重要，因为每一次commit，Git都会自动写入这些信息并且不可更改。
#+BEGIN_EXAMPLE
$ git config --global user.name "Drake Lee"
$ git config --global user.email "ebb_1028@163.com"

$ git config --global core.editer emacs    //设置编辑器

$ git config --list     //显示目前存在的配置
$ git config <key>      //显示某一项配置的值
#+END_EXAMPLE
*** help
有三种方式可以找到Git命令的使用手册：
#+BEGIN_EXAMPLE
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
#+END_EXAMPLE
*** init working-dir
有两种获取Git项目仓库的方法。
1. 将某个本地目录加入Git版本控制。
   #+BEGIN_EXAMPLE
   $ git init       //在当前目录创建.git子目录，但不跟踪当前目录原有文件
   #+END_EXAMPLE
   如果当前目录非空，我们应该要将原有文件通过Git跟踪起来。
   #+BEGIN_EXAMPLE
   $ git add *.c
   $ git add LICENSE
   $ git commit -m 'initial project version'
   #+END_EXAMPLE
2. 从远程仓库克隆一份到本地
   #+BEGIN_EXAMPLE
   // 命令格式是git clone [url]
   $ git clone https://github.com/xxxx       //从github拉一份xxxx项目目录到本地
   $ git clone https://github.com/aaaa bbbb  //拉aaaa项目目录到本地并更名为bbbb
   #+END_EXAMPLE
*** basic command
在Git管理的工作目录下，文件只有4种状态：untracked(未跟踪)、unmodified(未修改)、modified(已修改)、staged(已暂存)。
+ <img:文件状态图>

+ ~git status~ 检查当前文件状态
  #+BEGIN_EXAMPLE
  $ git status      //列举Git管理目录的文件状态
  $ git status -s   //一般我们会输出简短描述
                    //?? - untracked
                    //A_ - staged    untracked->staged
                    //M_ - staged    modified->staged
		    //_M - modified  文件被修改但还未提交暂存区
		    //MM - staged    modified->staged之后，再次被修改且未提交暂存区
  #+END_EXAMPLE
+ ~git add~ 将文件暂存(stage)
  - 将未跟踪(untraked)文件加入暂存区 
  - 将修改后(modified)文件加入暂存区
  #+BEGIN_EXAMPLE
  $ git add README
  #+END_EXAMPLE
*** ignore file
有时候项目中有些文件(IDE自动生成的文件、日志、临时文件、.DS_Store等)无须纳入Git的管理，也不想它们总出现在未跟踪文件列表，在这种情况下，我们可以创建一个名为 ~.gitignore~ 的文件，将要忽略的文件列举在里面，如：
#+BEGIN_EXAMPLE
$ cat .gitignore
*.[oa]       // 忽略所有以.o或.a结尾的文件
*~           // 忽略所有以~结尾的文件
#+END_EXAMPLE
~.gitignore~ 的格式规范如下：
 - 所有的空行或以'#'开头的行都会被忽略
 - 可以使用标准的glob模式匹配
 - 匹配模式可以以(/)开头防止递归
 - 匹配模式可以以(/)结尾指定目录
 - 要忽略指定模式外的文件或目录，可以在模式前加(!)取反

所谓的glob模式是指shell所使用的简化了的正则表达式。 '*'匹配零个或任意个字符；[abc]匹配任何一个列举值，'?'匹配任意一个字符，[0-9]匹配所有0到9的数字， '**'匹配任意中间目录。

一个更详细的 ~.gitignore~ 文件：
#+BEGIN_EXAMPLE
# 此为注释，将被Git忽略

# 忽略所有的.a结尾的文件
*.a

# 但lib.a除外
!lib.a

# 仅限于当前目录下的TODO文件，不包括subdir/TODO
/TODO

# 忽略build/目录下的所有文件
build/

# 忽略doc/notes.txt，但不包括doc/server/arch.txt
doc/*.txt
#+END_EXAMPLE
*** 

** 远程操作命令

