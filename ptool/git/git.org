和Github共享公钥
	1. 创建SSH公钥、私钥ssh-keygen -t rsa -C "ebb_1028@163.com"为密钥指定密码(common_style_1)
	2. 将公钥保存到GitHub
	3. 测试连接ssh -T git@github.com    选择yes，再次执行上面命令
从Github同步仓库
	1. Clone仓库(先在GitHub上建好Repository)
	git clone git@github.com:用户名/仓库名.git

* Git简介和安装
** Git起源
    Linux内核开源项目有着众多全球各地的参与者，在1991-2002年间，绝大多数的工作都花在了源码提交和保存归档等繁琐事务上。从2002年开始，项目组开始使用一个专有的分布式版本控制系统BitKeeper来管理和维护代码，但到2005年，开发BitKeeper的公司结束了与Linux项目组的合作关系，不再免费供其使用，这就迫使Linux社区(特别是Linus Torvalds)基于使用BitKeeper过程中的经验与教训，开发自己的版本控制系统，并提出了以下目标：
    + 速度
    + 简单的设计
    + 对非线性开发模式的强力支持(允许成千上万个并行开发的分支)
    + 完全分布式
    + 有能力高效管理超大规模的项目

    git由此而生，它诞生于2005年，并日臻完善。

** git的特性、分布式 VS 集中式
    Git相比较传统的VCS（CVS、SVN），具有以下特性：
    + Git是分布式版本控制系统。SVN是集中式版本控制系统。
      分布式的好处就是仓库就在本地，你随时都可以工作，提交代码而不用依赖网络
    + Git提交时是直接记录文件快照，而非记录版本差异。
    + Git保证完整性
    + Git中文件存在三种状态：modified(已修改)、staged(已暂存)、committed(已提交)

    分布式 VS 集中式
    + 集中式的版本控制：CVS、SVN、有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。每个版本记录的是修改文件的增量部分。
      坏处：中央服务器单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要 是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就还是会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，而被客户端提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人事先完整提取出来过。

    + 分布式的版本控制：Git。客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜 像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份
** TODO 如何安装git客户端
** 参数配置、Help
*** git config
    安装好Git后，我们需要定制本机的Git环境。Git自带了一个git config工具来帮助我们设置变量(用于控制Git的外观和行为)。这些变量存储在三个不同的位置：
    - /etc/gitconfig文件
      包含系统上每一个用户及他们仓库的通用配置。对应 'git config --system'
    - ~/.gitconfig 或 ~/.config/git/config
      只针对当前用户。对应 'git config --global'
    - <working-dir>/.git/config
      只针对当前仓库。
    如果不同级别有相同的key，则会从下往上覆盖。

    安装完Git后马上应该做的就是配置你的用户名和邮件地址，这很重要，因为每一次commit，Git都会自动写入这些信息并且不可更改。
    #+BEGIN_SRC bash
      #配置用户名和邮箱
      git config --global user.name "Drake Lee"
      git config --global user.email "ebb_1028@163.com"

      #设置编辑器
      git config --global core.editer emacs

      #显示目前存在的配置
      git config [--global] --list
      #显示某一项配置的值
      git config [--local] <key>
    #+END_SRC
*** help info
    有三种方式可以找到Git命令的使用手册：
    #+BEGIN_SRC bash
    git help <verb>
    git <verb> --help
    man git-<verb>
    #+END_SRC
*** init working-dir
    有两种获取Git项目仓库的方法。
    1. git init : 将某个本地目录加入Git版本控制。
       #+BEGIN_SRC bash
         #将当前目录纳入git版本管理(创建.git子目录)
	 #如果当前目录非空，git不会自动跟踪原有文件
         git init
       #+END_SRC
    2. git clone [url] : 从远程仓库克隆一份到本地
       #+BEGIN_SRC bash
         #从github拉一份xxxx项目目录到本地
	 git clone https://github.com/xxxx

	 #拉aaaa项目目录到本地并更名为bbbb
	 git clone https://github.com/aaaa bbbb
       #+END_SRC
 
*** ignore file
    项目中不是所有的文件都需要被git管理，如IDE自动生成的文件、日志、临时文件、.DS_Store等，可以在项目根目录下创建一个名为 '.gitignore' 的文件，将要忽略的文件/文件夹列举在里面。

    .gitignore的格式规范如下：
    + 所有的空行或以'#'开头的行都会被忽略
    + 支持标准的glob模式匹配
      所谓的glob模式是指shell所使用的简化了的正则表达式。 
      #+BEGIN_EXAMPLE
      '*'匹配零个或任意个字符
      [abc]匹配任何一个列举值
      '?'匹配任意一个字符
      [0-9]匹配所有0到9的数字
      '**'匹配任意中间目录。
      #+END_EXAMPLE
    + 匹配模式可以以(/)开头防止递归，以(/)结尾指定目录，在模式前加(!)取反

    一个更详细的 ~.gitignore~ 文件：
    #+BEGIN_EXAMPLE
      # 此为注释，将被Git忽略

      # 忽略所有的.a结尾的文件
      *.a

      # 但lib.a除外
      !lib.a

      # 仅限于当前目录下的TODO文件，不包括subdir/TODO
      /TODO

      # 忽略build/目录下的所有文件
      build/

      # 忽略doc/notes.txt，但不包括doc/server/arch.txt
      doc/*.txt
    #+END_EXAMPLE

* 仓库、版本管理和分支
** 理解git的设计理念
   要理解git的设计理念，关键是理解git的分布式，根据分布式CAP三角不相容原则，git追求的高可用性而不数据一致性。所以本地仓库和远程仓库都是各自独立管理版本库，客户端(本地仓库)通过不定期的交互命令、merge和合并，来达到某个时间和服务端(远程仓库)的一致性。
   从功能上区分，本地仓库=版本控制(仓库)+本地工作区+发起客户端请求， 远程仓库=版本控制(仓库)+响应客户端请求
** basic command
在Git管理的工作目录下，文件只有4种状态：untracked(未跟踪)、unmodified(未修改)、modified(已修改)、staged(已暂存)。
+ <img:文件状态图>

+ ~git status~ 检查当前文件状态
  #+BEGIN_EXAMPLE
  $ git status      //列举Git管理目录的文件状态
  $ git status -s   //一般我们会输出简短描述
                    //?? - untracked
                    //A_ - staged    untracked->staged
                    //M_ - staged    modified->staged
		    //_M - modified  文件被修改但还未提交暂存区
		    //MM - staged    modified->staged之后，再次被修改且未提交暂存区
  #+END_EXAMPLE
+ ~git add~ 将文件暂存(stage)
  - 将未跟踪(untraked)文件加入暂存区 
  - 将修改后(modified)文件加入暂存区
  #+BEGIN_EXAMPLE
  $ git add README
  #+END_EXAMPLE
+ git reset 回滚
  #+BEGIN_EXAMPLE
  git reset --hard
  #+END_EXAMPLE
+ git stash 在checkout分支时，将当前分支还不需要提交的修改寄存
  git stash
  git stash list
  git stash apply/pop
  git stash drop/clear

** 分支管理(git branch)
*** git中分支的概念
    要想更好的理解git的分支，关键是理解git的commit机制：每次commit都是对仓库文件的一次快照(版本)，HEAD指针在当前版本中随着版本向前移动。
    仓库首次commit的版本没有父版本，常规commit的版本有1个父版本，合并分支时可能会有多个父版本
    创建分支就是新建一个指向某个版本的指针，切换分支就是将HEAD指针指向分支指针对应的版本，分支的生命周期实质就是分支指针/HEAD指针在其版本线上的顺序移动，所以git创建和切换分支都非常快。
    git的默认分支是master(本地初始化时，要完成第一次提交才会在仓库真正创建master分支)

*** 分支管理命令
    | 创建分支             | git branch <new branch>                      | 基于HEAD指针创建新分支                                                                   |
    |                      | git branch <new branch> <target branch>      | 基于指定分支指针创建新分支，如果指定分支是远程跟踪分支，则自动建立关联关系               |
    |                      | git push -u <origin> <branch>                | 将当前本地分支推送到远程仓库并建立关联关系(-u参数)                                       |
    |----------------------+----------------------------------------------+------------------------------------------------------------------------------------------|
    | 查看分支             | git branch                                   | 查看本地分支(.git/refs/heads下的分支)                                                    |
    |                      | git branch -r                                | 查看远程跟踪分支(.git/refs/remotes/origin/下的分支)                                      |
    |                      | git branch -avv                              | 查看本地分支、远程跟踪分支(只读)，并列举本地分支的关联关系                               |
    |                      | git branch --merged / --no-merged            | 显示已被/未被合进当前分支的情况                                                          |
    |                      | git remote show origin                       | 查看远程仓库分支、远程跟踪分支                                                           |
    |----------------------+----------------------------------------------+------------------------------------------------------------------------------------------|
    | 同步远程分支信息     | git fetch -p origin                          | 同步远程跟踪分支的版本信息(会删除已失效的远程跟踪分支)                                   |
    |----------------------+----------------------------------------------+------------------------------------------------------------------------------------------|
    | 维护本地远程分支关系 | git branch --unset-upstream                  | 撤销本地分支和远程分支关联关系                                                           |
    |                      | git branch -u <origin/xxx>                   | 指定本地分支和远程分支关联关系                                                           |
    |----------------------+----------------------------------------------+------------------------------------------------------------------------------------------|
    | 切换分支、TAG、版本  | git checkout <target branch/tag/version>     | 切换到指定分支、TAG或历史版本(本地未提交的修改会带过去)                                  |
    |                      | git checkout -b <new branck> <target branch> | 创建并切换到指定分支，如果制定分支是远程跟踪分支，则自动建立关联关系; 默认当前分支为目标 |
    |----------------------+----------------------------------------------+------------------------------------------------------------------------------------------|
    | 合并分支             | git merge <target branch>                    | 将指定分支合并到当前分支(有冲突要手工解决冲突先)                                         |
    |----------------------+----------------------------------------------+------------------------------------------------------------------------------------------|
    | 删除分支             | git branch -d <target branch>                | 删除指定分支，如果有未合并的commit，则不能删除                                           |
    |                      | git branch -D <target branch>                | 强制删除指定分支                                                                         |
    |                      | git remote prune origin                      | 删除已经失效的远程跟踪分支                                                               |


    

* unchecked
1. 本地搭建git server/client
   mkdir server
   cd server
   git init --bare

   cd ..
   git clone server git1

2. .git/FETCH_HEAD
   .git/refs/
   
