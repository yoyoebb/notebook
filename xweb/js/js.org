* JS历史
+ 1995年，网景公司为了在浏览器中实现特殊操作，让Brendan Eich设计了JavaScript(10天时间)，取这个名称完全是为了蹭java的热度
   + 1996年，同样专注于模仿的MS，推出了他们的跟风版本:JScript
   + 次年(1997)，网景公司为了限制微软的变态复制能力，联合ECMA组织制定了JavaScript语言标准，简称ECMAScript标准(第一版)
   
   | ES 1 | 1997 |
   | ES 2 |      |
   | ES 3 |      |
   | ES 4 |      |
   | ES 5 |      |
   | ES 6 | 2015 |
* JS基础语法 (快速入门-廖雪峰)   
  + 和java相同 ： 大小写敏感、书写格式类似、注释、保留字
  + 和java不同 ： 解释运行、弱类型变量、原型机制
** 浏览器运行(html中嵌入js代码)
  1. 在<script>标签里直接编写代码   (script标签可以嵌入网页的任何地方，不过通常我们会放在<head>里)
     #+BEGIN_SRC html
     <html>
         <head>
	     <script>
	         alert("Hello World!");
	     </script>
	 </head>
	 <body>
	 </body>
     </html>
     #+END_SRC

  2. 将javsscript代码写在js文件中，通过<script src="..."/>引入
     #+BEGIN_SRC html
     ...
        <script src=""></script>    <!-- 不支持闭标签缩写 <script src=""/> -->
     ...
     #+END_SRC
     
** 数据类型及判定、类型的自动转换
*** 数据类型
   + 数值型number，包括整数(123)、浮点数(0.35)、科学技术法(1.2345e3)、NaN、Infinity
     Number()用于将其他类型转换为数值
      | boolean   |                                              true->1, false->0 |
      | string    | 数值字符串自动转换，包括'NaN','Infinity'; 空串->0; 无效值->NaN |
      | null      |                                                              0 |
      | undefined |                                                            NaN |

   + 字符串string，用单引号or双引号包含起来的任意字符(部分需要用转义字符\)
     String()用于将其他类型转换为字符串
      | number    | 自动转换为数值字符串         |
      | noolean   | true->'true', false->'false' |
      | null      | 'null'                       |
      | undefined | 'undefined'                  |

   + 布尔型boolean，包括ture、false。
     Boolean()用于将其他类型转换为布尔
      | number    | 非0为ture，0为false； NaN为false                               |
      | string    | 空字符串为false，非空字符串(包括' ','0','NaN','false'等)为ture |
      | null      | false                                                          |
      | undefined | false                                                          |

   + null 和 undefined
     null表示空值(不同于空串)，其实际含义是变量没有指向任何对象
     undefined表示值未定义，大多数时候我们都只用null就可以，仅在判定函数参数是否传递时用undefined

   + 数组[]: 按顺序排列的集合，索引从0开始
     var arr1 = [1, 2, 3.14, 'Hello', null, true];     //推荐
     var arr2 = new Array(1,2,3);
   
   + 对象{}: 键-值组成的无序集合(多个键值用','隔开')，通过 对象变量.属性名 的方式获取属性/调用函数
     #+BEGIN_SRC javascript
     var person = {
                    name: 'Bob',
                    age: 20
                  };
     #+END_SRC
     对象的key都是字符串，但值可以是任意类型
     当key不存在时，结果为undefined
     
*** 数据类型比较运作中的自动转换
1. 比较运算符(==)
   + 左右两边数据类型一致，同类型比较值
   + 左右两边数据类型不一致，且为基础类型(布尔、数值、字符串)时，不为数值的那一方自动通过Number()转换
   + NaN与任何值(包括NaN)比较都为false，只能用isNaN()来判定
   + undefined和null互相相等，除此之外和谁都不相等
   + 当基础类型和对象进行比较时，对象调用toString方法得到一个字符串
   + 对象和对象比较时，直接比较内存地址
   + 任何对象加!强制转false

2. 强制类型比较('===') : 不会自动进行类型转换的比较
   
*** 类型判定(typeof)
    在JS中，一切都是对象，但是某些对象还是和其他对象不太一样。为了区分对象的类型，我们用typeof操作符获取对象的类型，它总是返回一个字符串
    #+BEGIN_SRC javascript
    typeof 123;       // 'number'
    typeof NaN;       // 'number'
    typeof 'str';     // 'string'
    typeof true;      // 'boolean'
    typeof undefined; // 'undefined'
    typeof Math.abs;  // 'function'
    typeof null;      // 'object'    null和array、{}都会被判定为object
    typeof [];        // 'object'
    typeof {};        // 'object'

    //js中也有number、string、boolean的包装类，当使用new操作符时表示创建包装类类型，而不使用new时，表示简单的方法调用
    typeof new Number(123);      // 'object'
    typeof Number(123);          // 'number'
    new Number(1) === Number(1)  // false
    #+END_SRC
    
    总结:
    1. 不要使用 new Number()、new Boolean()、new String() 创建包装对象
    2. 用 parseInt() 或 parseFloat() 来转换任意类型到number
    3. 用 String() 来转换任意类型到string，或者直接调用某个对象的toString()方法
    4. 通常不必把任意类型转换为 boolean 再判断，因为可以直接写 if (myVar) {...}
    5. typeof操作符可以判断出number、boolean、string、function和undefined
    6. 判断Array要使用Array.isArray(arr)
    7. 判断null请使用 myVar === null
    8. 判断某个全局变量是否存在用 typeof window.myVar === 'undefined'
    9. 函数内部判断某个变量是否存在用 typeof myVar === 'undefined'

    js的奇葩设定:
    1. null、undefined没有toString()方法
    2. number对象调用toString()方法会报SyntaxError
       #+BEGIN_SRC javascript
       var obj = {};
       console.log(eee == null);                   // Uncaught ReferenceError: eee is not defined
       console.log(typeof eee === 'undefined');    // true
       console.log(obj.eee == null);               // true

       123.toString();     // SyntaxError
       123..toString();    // '123'
       (123).toString();   // '123'
       #+END_SRC
    
** 变量、作用域
*** 变量命名规则
   + 变量命名：大小写字母、数字、'_'的组合，且不能用数字开头；

   + 申明变量：坚持用var关键字申明变量，如果没有var，则默认为全局变量
     #+BEGIN_SRC javascript
     var a = 123;    //只能声明一次
     a = a+1;
     #+END_SRC

   + (ES6)strict模式：启用该模式后，声明变量时未用var，则会导致运行错误
     #+BEGIN_SRC javascript
     'use strict';       //在第一行使用，不支持该模式的浏览器只会当成一个字符串处理
     
     a = '123';
     console.log(a);     //控制台报错
     #+END_SRC

   + (ES6)常量和const关键字
     在ES6之前，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”
     ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：
*** 变量作用域   
   + 函数作用域
     1. 如果在变量在函数类声明，则作用域是整个函数体
     2. 当函数嵌套时，内部函数可以访问外部函数的var变量，反之不行
     3. JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部，但不会提升赋值语句

   + 全局作用域(实质是默认的window对象)
     函数内不用var声明的变量，函数外声明的变量，以及顶层函数，都会当成是windows对象绑定的属性

   + 解决命名冲突
     全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。
     减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个特有的全局变量中，许多第三方库都是这么干的(jQuery，YUI，underscore等等)

   + (ES6)局部作用域和let关键字
     由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的
     为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
     
*** TODO 解构赋值

** 面向对象
JS是基于对象的语言，并没有Java中class的概念，对应的prototype模式
如下示例：我们想创建多个Car对象，可以写一个Car构造函数，在函数中定义变量和方法
#+BEGIN_SRC javascript
  function Car(sColor, iDoors, iMpg){
      this.color = sColor;
      this.doors = iDoors;
      this.mpg = iMpg;

      this.showColor = function(){
	  alert(this.color);
      }
  }

  var oCar1 = new Car('red', 4, 23);
  var oCar2 = new Car('blue', 3, 25);
#+END_SRC
但这样定义的缺点在于，this.showColor函数是对象级别的，每个对象都会有，造成资源浪费。
怎么样像java一样，将方法申明为class级别，而不是对象级别呢？

方法一：混合的构造函数/原型方法
#+BEGIN_SRC javascript
  function Car(sColor, iDoors, iMpg){
      this.color = sColor;
      this.doors = iDoors;
      this.mpg = iMpg;
  }

  Car.prototype.showColor = function(){...}
#+END_SRC

方法二：动态原型方法
#+BEGIN_SRC javascript
  function Car(sColor, iDoors, iMpg){
      this.color = sColor;
      this.doors = iDoors;
      this.mpg = iMpg;

      if(typeof Car._initialized == "undefined"){
          Car.prototype.showColor = function(){...}
	  ...
	  
	  Car._initialized = true;
      }
  }
#+END_SRC

* JS高级特性 

