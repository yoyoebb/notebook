* Thread
** What are threads?
  在计算机历史里，OS的多任务处理(Multitasking)可谓是一个伟大的创新，有了这项技术之后，OS就可以利用时间切片切换执行不同的进程，由于切换的时间非常短暂，在用户看来就好像这些进程在同时处理，极大地提高了用户体验。

  而现代化编程语言纷纷借鉴了这一思想，在程序中引入了多线程技术，让同一个进程也具备了同时执行多个任务的能力，如：浏览器打开页面时可以同时从服务器下载多个独立图片，Web Server可以同时处理多个请求等。

  线程相对于进程具有不少优势：
    1. 创建和销毁线程的代价相对小
    2. 线程间可以共享资源，通信相对简单

  当然，万事有利必有逼，我们引入了多线程技术后，也面临着很多并发的问题需要解决，编程复杂度提高了不少。
** creat & run a thread
  在Java中，创建一个线程很简单，我们只需要 ~Thread t = new Thread()~ 即可获得一个线程对象，同时调用 ~t.start()~ ，线程就变成可执行状态，等待线程调度器执行了，线程在运行时，实际上是执行的是 ~Thread.run()~ ，但Thread类的run是个空方法，这样产生的线程运行后相当于什么也没做。

  
** Life Cycle
** Properties & Methods
* MultiThread
** Race Condition
** Lock & Condition
** Synchronization
** Client Lock
* Atomic
** 

