* 哈希算法概述
    哈希算法主要指消息摘要算法，理论上是不可逆的。

    它具有以下特点：
        + 压缩性：任意长度的数据，算出的哈希值长度都是固定的。
        + 不可逆：理论上无法从哈希值推导出原数据。
        + 容易计算：从原数据计算出哈希值很容易。
        + 抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的哈希值都有很大区别。
        + 强抗碰撞：已知原数据和其哈希值，想找到一个具有相同哈希值的数据（即伪造数据）是非常困难的。

    基于哈希算法的这些特性，现实中有如下应用场景：
        1. 生成源数据(文件、图片、程序...)的摘要值，用于确保信息传输完整一致
        2. 对一些不适合解密的数据进行加密存储，如：登录密码、支付密码等。
        3. 数字签名、安全证书等

** MD5
    MD5(Message Digest Algorithm 5)为计算机安全领域广泛使用的一种散列函数，用以提供消息的完整性保护，该算法的文件号为RFC 1321（R.Rivest,MIT Laboratory for Computer Science and RSA Data Security Inc. April 1992）。

    MD5 输出的摘要值是128 bit(16 byte)
*** MD5原理

** SHA
    SHA(Secure Hash Algorithm)是一个密码散列函数家族，是FIPS所认证的安全散列算法。SHA家族的五个算法，分别是SHA-1、SHA-224、SHA-256、SHA-384，和SHA-512，由美国国家安全局（NSA）所设计，并由美国国家标准与技术研究院（NIST）发布，是美国的政府标准。后四者有时并称为SHA-2。

    SHA-1在许多安全协定中广为使用，包括TLS和SSL、PGP、SSH、S/MIME和IPsec，曾被视为是MD5的后继者。但SHA-1的安全性如今被密码学家严重质疑；虽然至今尚未出现对SHA-2有效的攻击，但它的算法跟SHA-1基本上仍然相似；因此有些人开始发展其他替代的哈希算法。

* 哈希算法的安全性
    哈希算法虽然具有较高的安全性，对其相对有效的破解只有利用Brute Force(穷举)来进行碰撞攻击(collision attack)，但是当我们将其用于对密码加密等特定场景，使用不当时就会出现问题：
      + 用户设置的密码通常有特定规则，其有效字符(可输入字符的子集)和长度具有局限性
      + 大多数用户倾向于设置简单易记的密码(常用密码组合，容易记住的生日/数字)
      + 不同用户如果使用相同的密码，其hash值也相同
    这些特点，导致产生碰撞攻击的可能性大增，现实中也很快出现了相应的攻击手段

** 碰撞攻击的利器：RainBow Table(彩虹表)
    RainBow Table是一种将常用字符排列组合，再用特定hash算法产生hash值后，将source 和 值保存下来，依此形成的数据字典。攻击者拿到需要破译的哈希值后，只需要在RainBow Table中进行匹配，就有很高几率快速反向找出source。
      + 针对不同的hash算法，要使用不同的RainBow Table
      + 表内样本数据越多，哈希值被破解的几率就越大
      + 本质上是以空间换时间

** 防止RainBow Table的手段
*** 混合加密
    同时使用MD5值和SHA1，混合加密。由于加密前的source不变，攻击者只需要对RainBow Table换加密算法后再次映射，防御能力不高。

*** 加盐(Salt)
    为了减少碰撞几率，提高攻击者的成本，针对每个用户，系统随机产生一串salt，数据库中保存的不再是hash(password)，而是hash(password + salt)。
      + 经过加盐处理后的密文离散分布更广泛和随机
      + 不同用户有不同的salt，攻击者短时间很难大范围破解
      + salt通常和用户名、密码哈希值放在一块，攻击者能拿到密码哈希值的同时也能拿到salt
      + 针对特定目标(如指定客户、系统管理员等)，攻击者拿到salt后能生成加盐后的RainBow Table，被破解的几率还是很大
      + 为了加大基于salt和密码哈希值破解的难度，可以在系统中迭代加密次数(需要均衡考虑性能开销)

    有些系统为了省事，会使用一个固定的salt并硬编码在代码中。